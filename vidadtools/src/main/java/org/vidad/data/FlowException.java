/**
 * This file was generated by Moshe Beeri
 * Jul 22, 2013
 * com.orbograph.exception
 */
package org.vidad.data;

import org.apache.camel.Processor;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.log4j.Logger;
import org.bson.types.ObjectId;
import org.vidad.tools.conf.Collection;


/**
 * @author Moshe Beeri
 *
 */
public class FlowException extends Exception {
	
	/**
	 * serialVersionUID -
	 */
	private static final long serialVersionUID = 651059107997564521L;
	transient Logger	log = Logger.getLogger(FlowException.class);
	FlowExceptionInfo	flowExceptionInfo;
	long 				timestamp;
	
	public enum Severity {
		CRITICAL, UNSTABLE, WARNING,
	}
	
	/**
	 * @author Moshe Beeri
	 *
	 */
	public class FlowExceptionInfo extends Collectionable<FlowExceptionInfo> {
		Task 		task = null;
		Severity	severity = Severity.CRITICAL;
		String		message = "";
		String 		stackTrace = "";
		String		processorName = "";
		ObjectId	exceptionId;

		/**
	     * @param message
	     * @param severity
	     */
	    public FlowExceptionInfo(Throwable t, String processorName, Severity severity) {
			this.severity = severity;
			this.message = t.getMessage();
			this.stackTrace = ExceptionUtils.getStackTrace(t);
			this.processorName = processorName;
	    }
	
		/**
		 * @param message
		 * @param task
		 * @param severity
		 */
		public FlowExceptionInfo(Throwable t, String processorName, Task task, Severity severity) {
			this(t,processorName, severity);
			this.task = task;
		}

		/**
		 * @return the task
		 */
		public Task getTask() {
			return task;
		}

		/**
		 * @param task the task to set
		 */
		public void setTask(Task task) {
			this.task = task;
		}

		/**
		 * @return the severity
		 */
		public Severity getSeverity() {
			return severity;
		}

		/**
		 * @param severity the severity to set
		 */
		public void setSeverity(Severity severity) {
			this.severity = severity;
		}

		/**
		 * @return the message
		 */
		public String getMessage() {
			return message;
		}

		/**
		 * @param message the message to set
		 */
		public void setMessage(String message) {
			this.message = message;
		}

		/**
		 * @return the processorName
		 */
		public String getProcessorName() {
			return processorName;
		}

		/**
		 * @param processorName the processorName to set
		 */
		public void setProcessorName(String processorName) {
			this.processorName = processorName;
		}

		/**
		 * @return the stackTrace
		 */
		public String getStackTrace() {
			return stackTrace;
		}

		/**
		 * @return the exceptionId
		 */
		public ObjectId getExceptionId() {
			return exceptionId;
		}

		/**
		 * @return
		 * @see com.orbograph.data.Collectionable#getCollection()
		 */
		@Override
		public Collection getCollection() {
			return Collection.EXCEPTION;
		}

		/**
		 * @return
		 * @see com.orbograph.data.Collectionable#getObjectId()
		 */
		@Override
		public ObjectId getObjectId() {
			return exceptionId;
		}

		/**
		 * @param id
		 * @see com.orbograph.data.Collectionable#setObjectId(org.bson.types.ObjectId)
		 */
		@Override
		public void setObjectId(ObjectId id) {
			exceptionId = id;
		}
	}

    /**
     * @param message
     */
    protected FlowException(String message) {
        super(message);
		flowExceptionInfo = new FlowExceptionInfo(this, null, Severity.CRITICAL); 
    }

    protected FlowException(Throwable t, String processorName, Task task, Severity severity) {
	      super(t);
	      flowExceptionInfo = new FlowExceptionInfo(t, processorName, task, severity); 
	}	
	
    /**
	 * @param message
	 * @param task
	 */
	protected FlowException(String message, Class<? extends Processor> processor, Task task) {
		this(message, processor, task, Severity.CRITICAL);
	}

	/**
	 * @param message
	 * @param task
	 * @param severity
	 */
	protected FlowException(String message, Class<? extends Processor> processor, Task task, Severity severity) {
		this(message);
		flowExceptionInfo = new FlowExceptionInfo(this, processor.getSimpleName(), task, severity); 
	}
	
	/**
	 * @param t
	 * @param processor
	 * @param task
	 * @return
	 */
	public static FlowException create(Throwable t,
			Class<? extends Processor> processor, Task task) {
		return create(t, processor, task, Severity.CRITICAL);
	}    

	/**
	 * @param t
	 * @param processor
	 * @param task
	 * @return
	 */
	public static FlowException create(Throwable t,
			Class<? extends Processor> processor, Task task, Severity severity ) {
		return new  FlowException(t, processor.getSimpleName(), task, severity);

	}    
    

	public static FlowException create(String message, Class<? extends Processor> processor, Severity severity, Task task){
		return new  FlowException(message, processor, task, severity);
	}
	
	
	/**
	 * @return the flowExceptionInfo
	 */
	public FlowExceptionInfo getFlowExceptionInfo() {
		return flowExceptionInfo;
	}

	/**
	 * @param flowExceptionInfo the flowExceptionInfo to set
	 */
	public void setFlowExceptionInfo(FlowExceptionInfo flowExceptionInfo) {
		this.flowExceptionInfo = flowExceptionInfo;
	}


}
