/**
 * This file was generated by Moshe Beeri
 * Aug 7, 2013
 * org.vidad.service
 */
package org.vidad.tools.service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.Date;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.CacheControl;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.EntityTag;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.httpclient.HttpStatus;
import org.apache.log4j.Logger;
import org.bson.types.ObjectId;
import org.joda.time.DateTime;
import org.vidad.data.Video;
import org.vidad.tools.nosql.Mongodb;
import org.vidad.tools.rest.MongoRestService;

import com.google.gson.Gson;
import com.mongodb.gridfs.GridFSDBFile;
import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.FormDataParam;

import org.vidad.tools.conf.Collection;

/**
 * @author Moshe Beeri
 *
 */
@Path("/video")
@Consumes("application/json")
@Produces("application/json")
public class VideoRest extends MongoRestService<Video>{
	Logger log = Logger.getLogger(VideoRest.class);

	/**
	 * @throws Exception
	 */
	public VideoRest() {
		super(Video.class);
		
	}
	Gson gson = new Gson();
    @POST
    @Path("/uploadWeb")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    public Response uploadWeb(	@FormDataParam("image")     InputStream uploadedInputStream,
    							@FormDataParam("image") 	FormDataContentDisposition fileDetail,								
								@FormDataParam("type") 		String type,
								@FormDataParam("version") 	String version) throws IOException {
    	
/*
        int read = 0;
        byte[] bytes = new byte[1024];
        while ((read = uploadedInputStream.read(bytes)) != -1)
            System.out.write(bytes, 0, read);
*/
    	String str = "Hello uploadWeb";
    	return Response.status(HttpStatus.SC_OK).entity(str).build();
    }

    @POST
    @Path("/uploadCURL")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    public Response uploadCURL(	@FormDataParam("image")     	InputStream uploadedInputStream,
								@FormDataParam("name") 			String name,								
								@FormDataParam("system") 		String system,
								@FormDataParam("type") 			String type,
								@FormDataParam("version") 		String version,
								@FormDataParam("key") 			String key,
								@FormDataParam("component") 	String component) throws IOException {
/*
        int read = 0;
        byte[] bytes = new byte[1024];
        while ((read = uploadedInputStream.read(bytes)) != -1)
            System.out.write(bytes, 0, read);
*/
    	String str = "Hello uploadCURL";
    	return Response.status(HttpStatus.SC_OK).entity(str).build();
    }
    
    /**
     * @SEE http://stackoverflow.com/questions/9204287/how-to-return-a-png-image-from-jersey-rest-service-method-to-the-browser
     * @param objectIdJson
     * @param collection
     * @param request
     * @return
     * @throws WebApplicationException
     */
    @Path("get/vid/{id}")
    @GET
    @Produces("video/mp4")
    public Response getVideo(	@PathParam("id") String objectIdStr, 
					            @Context Request request) throws WebApplicationException {
        try {
			Mongodb mongodb = Mongodb.getInstance();
	        ObjectId objectId = new ObjectId(objectIdStr);
	        Video video = mongodb.getCollectionable(objectId, Collection.VIDEO, Video.class);
	        
	        CacheControl cc = new CacheControl();
	        cc.setNoTransform(true);
	        cc.setMustRevalidate(false);
	        cc.setNoCache(false);
	        cc.setMaxAge(3600);
	        
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			String md5str = new String(md5.digest(video.getVideoURL().getBytes()));			
	        EntityTag etag = new EntityTag(md5str);
	        Date lastModified = video.getReceivedTime();
	        String mime = "video/mp4";
	        Date expirationTimestamp = new DateTime(lastModified).plusDays(1).toDate();
	        
	        Response.ResponseBuilder responseBuilder = request.evaluatePreconditions(lastModified, etag);
	        if (responseBuilder != null) {
	            // Preconditions are not met, returning HTTP 304 'not-modified'
	            return responseBuilder
	                    .cacheControl(cc)
	                    .build();
	        }
	        Response response = Response
	                .ok(Paths.get(video.getVideoURL()).toFile())
	                .cacheControl(cc)
	                .tag(etag)
	                .lastModified(lastModified)
	                .expires(expirationTimestamp)
	                .type(mime)
	                .build();
	        return response;
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
    }
    
    /**
     * @SEE http://stackoverflow.com/questions/9204287/how-to-return-a-png-image-from-jersey-rest-service-method-to-the-browser
     * @param objectIdJson
     * @param collection
     * @param request
     * @return
     * @throws WebApplicationException
     */
    @Path("get/img/{collection}/{id}")
    @GET
    @Produces("image/png")
    public Response getImage(	@PathParam("collection") String collection,	
    							@PathParam("id") String objectIdStr, 
					            @Context Request request) throws WebApplicationException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        try {
			Mongodb mongodb = Mongodb.getInstance();
			//validate collection name 
			Collection.fromString(collection);
	        ObjectId objectId = new ObjectId(objectIdStr);
	        GridFSDBFile gfsdbImage = mongodb.getGridFSDBFile(objectId, collection);
	        
	        CacheControl cc = new CacheControl();
	        cc.setNoTransform(true);
	        cc.setMustRevalidate(false);
	        cc.setNoCache(false);
	        cc.setMaxAge(3600);
	        
	        EntityTag etag = new EntityTag(gfsdbImage.getMD5());
	        Date lastModified = gfsdbImage.getUploadDate();
	        String mime = getMimeFromFileName(gfsdbImage.getFilename());
	        Date expirationTimestamp = new DateTime(lastModified).plusDays(1).toDate();
	        
	        Response.ResponseBuilder responseBuilder = request.evaluatePreconditions(lastModified, etag);
	        if (responseBuilder != null) {
	            // Preconditions are not met, returning HTTP 304 'not-modified'
	            return responseBuilder
	                    .cacheControl(cc)
	                    .build();
	        }
	        gfsdbImage.writeTo(stream);
	        Response response = Response
	                .ok()
	                .cacheControl(cc)
	                .tag(etag)
	                .lastModified(lastModified)
	                .expires(expirationTimestamp)
	                .type(mime)
	                .entity(stream.toByteArray())
	                .build();
	        return response;
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();
		}
    }

	/**
	 * @param filename
	 * @return
	 */
	private String getMimeFromFileName(String filename) {
		if( filename.endsWith("pdf"))
			return "application/pdf";
		return "image/png";
	}   

}
