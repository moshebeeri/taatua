/**
 * This file was generated by Moshe Beeri
 * Apr 24, 2013
 * com.orbograph.cloudtools.conf
 */
package org.vidad.tools.conf;

import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Moshe Beeri
 *
 */
public class Environments {
	private static Environments instance;
	private static Map<String, Environment> environments;
	private static Configure settings = Configure.settings();
	
	private Environments() {
		environments = new HashMap<String, Environment>();
	}

	public static Environments getInstance() {
		if (null == instance) {
			synchronized (Environments.class) {
				if (null == instance)
					instance = new Environments();
			}
		}
		return instance;
	}
	
	public Environment getEnvironment() throws Exception{
		
		if(environments.containsKey("external"))
			return environments.get("external");
		
		String envName = settings.getString("active.environment");
		if(envName == null)
			throw new IllegalArgumentException("active.environment is not defined in settings.properties file please add active.environment e.g. active.environment=environment.localhost");

		boolean envEnabled = settings.getBoolean(envName);
		if(!envEnabled)
			throw new IllegalArgumentException("disenabled environment = " + envName + ", set " + envName + "=true in settings.properties");
		switch(envName){
		case "environment.localhost":
			String uri = settings.getPath(envName+".pathname");
			return getFileEnvironmet(Paths.get(uri));
		case "environment.aws":
			break;
		case "environment.resource":
			InputStream in = this.getClass().getClassLoader().getResourceAsStream("Environment.xml");
			return getStreamEnvironmet(in);
		}
		return null;
	}
	
	public void addFileEnvironment(Environment env){
		String envName = settings.getString("active.environment");
		String uri = settings.getString(envName+".pathname");
		environments.put(uri,env);
	}
	
	public Environment getStreamEnvironmet(InputStream in ) throws Exception{
		return new Environment().fromStream(in);
	} 

	public Environment getFileEnvironmet(Path path) throws Exception{
		String xmlflie = path.toFile().getAbsolutePath();
		Environment e =  environments.get(xmlflie);
		if(e!=null)
			return e;
		e = new Environment().fromPath(path);
		environments.put(xmlflie, e);
        return e;
	} 

	public Environment getS3Environmet(String bucket, String file) throws Exception {
		String key = bucket + "/" + file;
		Environment e;
		
		if(	(e =  environments.get(key)) != null)
			return e;
		
		Configure settings = Configure.settings();
		String accessKey = settings.getString("aws.accessKey");
		String secretKey = settings.getString("aws.secretKey");
		e = new Environment().fromS3(accessKey, secretKey, bucket, file);
		environments.put(key, e);
		return e;
	} 
	
	public void useExternalEnvironment(Environment environment){
			environments.put("external", environment);
	}
}
