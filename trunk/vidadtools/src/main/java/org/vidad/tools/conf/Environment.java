/**
 * This file was generated by Moshe Beeri
 * Apr 24, 2013
 * com.orbograph.cloudtools.conf
 */
package org.vidad.tools.conf;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Path;
import org.apache.log4j.Logger;
import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.Transient;
import org.simpleframework.xml.core.Persister;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

/**
 * @author Moshe Beeri
 * 
 */
@Root(name = "Environment")
public class Environment {
	@Transient
	transient Logger log = Logger.getLogger(Element.class);
	@Transient
	transient String path;
	@Element
	MongoConfig mongoConfig;

	/**
	 * 
	 */
	public Environment() {
		super();

	}

	/**
	 * @param path
	 */
	public Environment(String path) {
		super();
		this.path = path;
	}

	/**
	 * @param serializer
	 * @param xmlflie
	 */
	public void generateEmptyEnvironment(Serializer serializer, String xmlflie) {
		MongoConfig.create();
		try {
			serializer.write(this, new File(xmlflie));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param activeTenantName
	 * @param mongoDBInfo
	 * @param aws
	 */
	public Environment(String activeTenantName, MongoConfig mongoConfig) {
		super();
		this.mongoConfig = mongoConfig;
	}

	/**
	 * @param accessKey
	 * @param secretKey
	 * @param bucket
	 * @param file
	 * @return the newly created environment descriptor from S3 stored file.
	 * @throws IOException 
	 * @throws Exception
	 */
	public Environment fromS3(String accessKey, String secretKey,
			String bucket, String file) throws IOException  {
		Environment environment = null;
		AWSCredentials credentials = new BasicAWSCredentials(accessKey,
				secretKey);
		AmazonS3Client s3Client = new AmazonS3Client(credentials);
		S3Object object = s3Client
				.getObject(new GetObjectRequest(bucket, file));

		InputStream reader = new BufferedInputStream(object.getObjectContent());
		
		if(file.endsWith("xml")){
			Serializer serializer = new Persister();
			try{
				environment = serializer.read(Environment.class, reader);
			}catch(Exception e){
				String dscr = "Environment could not be converted properly, check that you have the right version in S3 - " + e.getMessage();
				log.error(dscr);
				throw new IllegalArgumentException(dscr);
			}
		}else if(file.endsWith("json")){
			environment = readJsonFromFile(new InputStreamReader(reader));
		}else
			throw new IllegalArgumentException("unknown file type" + file + " in bucket "+ bucket);

		environment.path = object.getRedirectLocation();
		return environment;
	}

	/**
	 * @param path
	 *            to an xml file describing this class
	 * @return newly created environment
	 * @throws Exception
	 *             Thrown by simple xml
	 */
	public Environment fromPath(Path path) throws Exception {
		Environment e=null;
		String absolutePath = path.toFile().getAbsolutePath();
		log.info("read environment from path-" + path.getFileName());
		if(absolutePath.endsWith("xml")){
			Serializer serializer = new Persister();
			e = serializer.read(Environment.class, path.toFile());
			
		}else if(absolutePath.endsWith("json")){
			e = readJsonFromFile(new FileReader(path.toFile()));
		}else
			throw new IllegalArgumentException("unknown file type " +path.toFile().getAbsolutePath());
		e.path = absolutePath;
		return e;
	}

	/**
	 * @param in
	 * @return
	 * @throws Exception 
	 */
	public Environment fromStream(InputStream in) throws Exception {
		Serializer serializer = new Persister();
		return serializer.read(Environment.class, in);
	}

	/**
	 * @return the path
	 */
	public String getPath() {
		return path;
	}

	/**
	 * @param path
	 *            the path to set
	 */
	public void setPath(String path) {
		this.path = path;
	}


	/**
	 * @return the mongoConfig
	 */
	public MongoConfig getMongoConfig() {
		return mongoConfig;
	}

	/**
	 * @param mongoConfig the mongoConfig to set
	 */
	public void setMongoConfig(MongoConfig mongoConfig) {
		this.mongoConfig = mongoConfig;
	}

	/**
	 * @param isr
	 * @return
	 * @throws IOException
	 */
	public Environment readJsonFromFile(InputStreamReader isr) throws IOException {
		Gson gson = new Gson();
		return gson.fromJson(isr, Environment.class);
	}

	/**
	 * @param fr
	 * @return
	 * @throws IOException
	 */
	public Environment readJsonFromFile(FileReader fr) throws IOException {
		Gson gson = new Gson();
		return gson.fromJson(fr, Environment.class);
	}

	/**
	 * @param fw
	 * @throws IOException
	 */
	public void writeAsJsonToFile(FileWriter fw) throws IOException {
		log.info("write environment as JSON file ");
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		JsonParser jp = new JsonParser();
		JsonElement je = jp.parse(gson.toJson(this));
		String prettyJsonString = gson.toJson(je);
		log.info(prettyJsonString);
		fw.write(prettyJsonString);
		fw.flush();
	}
	
	/**
	 * @return
	 */
	public String toJson() {
		return new Gson().toJson(this);
	}
	
	public static void main(String[] args) throws Exception {
		Serializer serializer = new Persister();
		String xmlflie = "/opt/orbograph/environment-new.xml";
		Environment e = new Environment();
		e.generateEmptyEnvironment(serializer, xmlflie);
//		e.writeAsJsonToFile(new FileWriter("/opt/orbograph/environment-json.xml"));
//		e = e.readJsonFromFile(new FileReader("/opt/orbograph/environment-json.xml"));
//		System.out.println(e.toJson());
//		e = Environments.getInstance().getFileEnvironmet(Paths.get(xmlflie));
//		System.out.println(e.toJson());
    }



}
