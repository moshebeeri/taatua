/**
 * This file was generated by Moshe Beeri
 * Jun 17, 2013
 * com.orbograph.rest
 */
package org.vidad.tools.rest;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.UriInfo;

import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.vidad.tools.nosql.Mongodb;

import com.google.gson.Gson;

/**
 * @author Moshe Beeri
 *
 *	Create = PUT with a new URI
 *       	 POST to a base URI returning a newly created URI
 *	Read   = GET
 *	Update = PUT with an existing URI
 *	Delete = DELETE
 *
 */
public abstract class RestService<T> {
	protected transient Gson gson = new Gson();  
	protected transient Logger log = Logger.getLogger(RestService.class);
	protected transient Class<T> clazz;
	protected transient Mongodb mongo;

	@Context
	UriInfo uriInfo;
	@Context
	Request request;
	
	/**
	 * @throws Exception 
	 * 
	 */
	public RestService(Class<T> clazz) {
		mongo = Mongodb.getInstance();
		this.clazz = clazz;
	}
	
	/**
	 * @param mongo
	 * @throws Exception
	 */
	public RestService(Mongodb mongo) {
		this.mongo = mongo;
	}
	
	@POST
	@Path("create")
	@Produces("application/json")
	@Consumes("application/json")
	public abstract T create(@HeaderParam("key") String key, T object ) throws Exception;

	@PUT
	@Path("update")
	@Produces("application/json")
	@Consumes("application/json")
	public abstract T update(@HeaderParam("key") String key, T object ) throws Exception;

	@GET
	@Path("get/{id}")
	@Produces("application/json")
	public abstract T read(@HeaderParam("key") String key, @PathParam("id") String id) throws Exception;
	
	@GET
	@Path("getall")
	@Produces("application/json")
	public abstract List<T> readAll(String key) throws Exception;

	@GET
	@Path("getfrom/{timestamp}")
	@Produces("application/json")
	public abstract List<T> readFromTime(@HeaderParam("key") String key, @PathParam("timestamp") Long timestamp)throws Exception;

	@DELETE
	@Path("delete/{id}")
	@Produces("application/json")
	public abstract T delete(@HeaderParam("key") String key, @PathParam("id") String id) throws Exception;
	
	@GET
	@Path("ping/{name}")
	@Produces("application/json")
	public String ping(@HeaderParam("key") String key,@PathParam("name") String name) throws Exception {
		return "ping response for " + name + " server time "  + new DateTime().toString();
	}

}
