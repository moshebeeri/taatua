/**
 * This file was generated by Moshe Beeri
 * Jul 24, 2013
 * com.orbograph.camel.processor
 */
package org.vidad.camel;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.log4j.Logger;
import org.bson.types.ObjectId;
import org.vidad.data.FlowException;
import org.vidad.data.Tasks;
import org.vidad.data.FlowException.FlowExceptionInfo;
import org.vidad.data.Task;
import org.vidad.tools.nosql.Mongodb;

import com.google.gson.Gson;


/**
 * @author Moshe Beeri
 *
 */
public abstract class BaseProcessor implements Processor {
	protected Logger log;
	protected Gson gson = new Gson();
	protected Mongodb mongo;

	/**
	 * @param algorithmsProvider
	 * @param mongo
	 * @param logger 
	 */
	protected BaseProcessor(Logger logger) {
		this(Mongodb.getInstance(), logger );
	}

	/**
	 * @param algorithmsProvider
	 * @param mongo
	 * @param logger 
	 */
	protected BaseProcessor(Mongodb mongodb, Logger logger) {
		super();
		this.log = logger;
		this.mongo = mongodb;
	}

	/**
	 * @param exchange
	 * @param e
	 * @param task 
	 * @throws Throwable 
	 */
	protected void handleThrowable(Class<? extends Processor> processor, Exchange exchange, Throwable t, Task task) {
		logThrowable(t);
		if(task==null)
			task = new Task();
		FlowException fe = FlowException.create(t, processor, task);
		handelFlowException(exchange, fe);
	}
	
	/**
	 * @param exchange
	 * @param e
	 * @param task 
	 */
	protected void handleException(Class<? extends Processor> processor, Exchange exchange, Exception e, Task task) {
		handleThrowable(processor, exchange, e, task);
	}
	
	/**
	 * @param e
	 * @return
	 */
	protected void logThrowable(Throwable t) {
		String stackTrace = ExceptionUtils.getStackTrace(t);
		log.error(t.getMessage());
		log.error(stackTrace);
		t.printStackTrace();
	}
	
	/**
	 * @param ei - the exception info that was stored in mongo as part of the flow exception handling 
	 */
	protected void logFlowExceptionInfo(FlowExceptionInfo ei) {
		String stackTrace = ei.getStackTrace();
		log.error(ei.getMessage());
		log.error(stackTrace);
	}

	/**
	 * @param exchange
	 * @param fe
	 */
	protected void handelFlowException(Exchange exchange, FlowException fe){
		Task task = fe.getFlowExceptionInfo().getTask();
		ObjectId id = mongo.insertCollectionable(fe.getFlowExceptionInfo());
		task.setExceptionId(id);
		log.error("Reporting FlowException recived from " + getClass().getSimpleName() + " meggage:" + fe.getMessage());
		processFailure(exchange, task);
	}

	/**
	 * @param exchange
	 * @param task
	 */
	private void processFailure(Exchange exchange, Task task){
		exchange.getOut().setBody(gson.toJson(task), String.class);
		exchange.getOut().setHeaders(exchange.getIn().getHeaders());
		exchange.getIn().setHeader("status", "exception");
	}
	
	/**
	 * @param exchange
	 */
	protected void processSuccess(Exchange exchange){
		exchange.getIn().setHeader("status", "ok");	
	}
			
	/**
	 * @param exchange
	 * @param task
	 */
	protected void processSuccess(Exchange exchange, Task task) {
		processSuccess(exchange, Tasks.fromTask(task));	
	}

	/**
	 * @param exchange
	 * @param tasks
	 */
	protected void processSuccess(Exchange exchange, Tasks tasks){
		processSuccess(exchange, gson.toJson(tasks));
	}

	/**
	 * @param exchange
	 * @param tasks
	 */
	protected void processSuccess(Exchange exchange, String tasks){
		exchange.getOut().setBody(tasks, String.class);
		exchange.getOut().setHeaders(exchange.getIn().getHeaders());
		exchange.getIn().setHeader("status", "ok");
	}

}
